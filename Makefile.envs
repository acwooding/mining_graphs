#
# Environment Management Makefile
#

include Makefile.include

$(LOCKFILE): check_installation .make.bootstrap .make.pip-requirements.txt .make.environment-default.yml .make.conda-forge-requirements.txt
ifeq (conda, $(VIRTUALENV))
	$(CONDA_EXE) env update -n $(PROJECT_NAME) -f .make.environment-default.yml --prune
	$(CONDA_EXE) install -n $(PROJECT_NAME) --file .make.conda-forge-requirements.txt --channel defaults --channel conda-forge --strict-channel-priority --yes
	$(CONDA_EXE) run -n $(PROJECT_NAME) --no-capture pip install -r .make.pip-requirements.txt
	$(CONDA_EXE) env export -n $(PROJECT_NAME) -f $(LOCKFILE)
else
	$(error Unsupported Environment `$(VIRTUALENV)`. Use conda)
endif

# extract multi-phase dependencies from environment.yml
.make.environment-pip.yml: environment.yml .make.bootstrap
	$(CONDA_EXE) run -n $(PROJECT_NAME) --no-capture $(PYTHON_INTERPRETER) scripts/split_pip.py pip-yaml $(PROJECT_DIR)environment.yml > $@

.make.pip-requirements.txt: environment.yml .make.bootstrap
	$(CONDA_EXE) run -n $(PROJECT_NAME) --no-capture $(PYTHON_INTERPRETER) scripts/split_pip.py pip $(PROJECT_DIR)environment.yml > $@

.make.conda-forge-requirements.txt: environment.yml .make.bootstrap
	$(CONDA_EXE) run -n $(PROJECT_NAME) --no-capture $(PYTHON_INTERPRETER) scripts/split_pip.py conda-forge $(PROJECT_DIR)environment.yml > $@

.make.environment-default.yml: environment.yml .make.bootstrap
	$(CONDA_EXE) run -n $(PROJECT_NAME) --no-capture $(PYTHON_INTERPRETER) scripts/split_pip.py default $(PROJECT_DIR)environment.yml > $@

.make.bootstrap: scripts/bootstrap.yml
	$(CONDA_EXE) env update -n $(PROJECT_NAME) -f scripts/bootstrap.yml
	$(ECHO) "" > $@

.PHONY: create_environment
## Set up virtual (conda) environment for this project
create_environment: $(LOCKFILE)
ifeq (conda,$(VIRTUALENV))
	@$(RM) $(LOCKFILE)
	@$(PYTHON_INTERPRETER) -c "print('\nNew conda env created. Activate with:\n>>> conda activate $(PROJECT_NAME)\n>>> make update_environment')"
ifneq ("X$(wildcard .post-create-environment.txt)","X")
	@$(CAT) .post-create-environment.txt
endif
else
	$(error Unsupported Environment `$(VIRTUALENV)`. Use conda)
endif

.PHONY: delete_environment
## Delete the virtual (conda) environment for this project
delete_environment: clean
ifeq (conda,$(VIRTUALENV))
	@$(PYTHON_INTERPRETER) -c "print('Deleting conda environment.')"
	$(CONDA_EXE) env remove -n $(PROJECT_NAME)
	$(RM) $(LOCKFILE)
ifneq ("X$(wildcard .post-delete-environment.txt)","X")
	@$(CAT) .post-delete-environment.txt
endif
else
	$(error Unsupported Environment `$(VIRTUALENV)`. Use conda)
endif

.PHONY: update_environment
## Install or update Python Dependencies in the virtual (conda) environment
update_environment: environment_enabled $(LOCKFILE)
ifneq ("X$(wildcard .post-update-environment.txt)","X")
	@$(CAT) .post-update_environment.txt
endif

.PHONY: environment_enabled
# Checks that the conda environment is active
environment_enabled:
ifeq (conda,$(VIRTUALENV))
ifneq ($(notdir ${CONDA_DEFAULT_ENV}), $(PROJECT_NAME))
	$(error Run "$(VIRTUALENV) activate $(PROJECT_NAME)" before proceeding...)
endif
else
	$(error Unsupported Environment `$(VIRTUALENV)`. Use conda)
endif

.PHONY: check_lockfile
# Test that an environment lockfile exists
check_lockfile:
ifeq (X,X$(wildcard $(LOCKFILE)))
	$(error Run "make update_environment" before proceeding...)
endif

.PHONY: check_environment
## Check if configuration is correct and environment is enabled
check_environment: check_installation environment_enabled check_lockfile $(LOCKFILE)

.PHONY: check_installation
# Check if Easydata installation is correct, and all dependencies are installed
check_installation:
	$(foreach testCommand,$(INSTALL_DEPS),\
	   $(if $(shell ${WHICH} $(testCommand) 2>${DEVNULL} ),,\
	       $(error "Dependency '$(testCommand)' not found. Please re-install this dependency.")))
